AWSTemplateFormatVersion: "2010-09-09"
Description: "Application Layer"
Parameters:
  ProjectId:
    Description: "Project name id"
    Type: String
    AllowedPattern: '^[a-zA-Z0-9-/:-@\[-\`\{-\~]+$'
    ConstraintDescription: "InvalidValue[ProjectId]"
    Default: sample
  RdsMasterUserPassword:
    Description: "RDS Master User Password"
    Type: String
    AllowedPattern: '^((?![/"@])[\x00-\x7F]){8,41}$'
  EnvironmentType:
    Description: "The environment type"
    Type: String
    Default: dev
    AllowedValues:
      - prd
      - stage
      - dev
    ConstraintDescription: must be a prd or stage or dev
Resources:
  # ------------------------------------------------------------#
  #  ALB
  # ------------------------------------------------------------#
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ProjectId}-${EnvironmentType}-alb"
      Scheme: "internet-facing"
      Type: "application"
      Subnets:
        - { "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-subnet1" }
        - { "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-subnet2" }
      SecurityGroups:
        - {
            "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-secgrp-alb",
          }
      LoadBalancerAttributes:
        - Key: "access_logs.s3.enabled"
          Value: "false"
        - Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - Key: "deletion_protection.enabled"
          Value: "false"
        - Key: "routing.http2.enabled"
          Value: "true"
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"
        - Key: "routing.http.xff_client_port.enabled"
          Value: "false"
        - Key: "routing.http.desync_mitigation_mode"
          Value: "defensive"
        - Key: "waf.fail_open.enabled"
          Value: "false"
        - Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
          Value: "false"

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref TargetGroupWEB
          Type: "forward"

  ALBListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "1"
      ListenerArn: !Ref ALBListener
      Conditions:
        - Field: "path-pattern"
          Values:
            - "/api-explorer/*"
            - "/api/*"
      Actions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroupAPI
          Order: 1
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroupAPI
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false

  # ------------------------------------------------------------#
  #  TargetGroup
  # ------------------------------------------------------------#
  TargetGroupAPI:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Matcher:
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: { "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-vpc" }
      Name: !Sub "${ProjectId}-${EnvironmentType}-api-targetgroup"
      HealthCheckEnabled: true
      TargetGroupAttributes:
        - Key: "stickiness.enabled"
          Value: "false"
        - Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - Key: "stickiness.app_cookie.cookie_name"
          Value: ""
        - Key: "stickiness.type"
          Value: "lb_cookie"
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - Key: "slow_start.duration_seconds"
          Value: "0"
        - Key: "stickiness.app_cookie.duration_seconds"
          Value: "86400"
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"

  TargetGroupWEB:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Matcher:
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: { "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-vpc" }
      Name: !Sub "${ProjectId}-${EnvironmentType}-targetgrp-web"
      HealthCheckEnabled: true
      TargetGroupAttributes:
        - Key: "stickiness.enabled"
          Value: "false"
        - Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - Key: "stickiness.app_cookie.cookie_name"
          Value: ""
        - Key: "stickiness.type"
          Value: "lb_cookie"
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - Key: "slow_start.duration_seconds"
          Value: "0"
        - Key: "stickiness.app_cookie.duration_seconds"
          Value: "86400"
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"

  # ------------------------------------------------------------#
  #  ECR
  # ------------------------------------------------------------#
  ECRRepositoryAPI:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Sub "${ProjectId}-${EnvironmentType}-api"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Delete more than 20 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 20
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  ECRRepositoryWEB:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Sub "${ProjectId}-${EnvironmentType}-web"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Delete more than 20 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 20
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # ------------------------------------------------------------#
  #  ECS
  # ------------------------------------------------------------#
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${ProjectId}-${EnvironmentType}"
      CapacityProviders:
        - "FARGATE_SPOT"
        - "FARGATE"

  ECSLogGroupAPI:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/ecs/logs/${ProjectId}-${EnvironmentType}-ecs-api"

  ECSLogGroupWEB:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/ecs/logs/${ProjectId}-${EnvironmentType}-ecs-web"

  ECSServiceAPI:
    Type: "AWS::ECS::Service"
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub "${ProjectId}-${EnvironmentType}-api-service"
      Cluster: !GetAtt ECSCluster.Arn
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroupAPI
          ContainerName: !Sub "${ProjectId}-${EnvironmentType}-api"
          ContainerPort: 5000
      DesiredCount: 1
      LaunchType: "FARGATE"
      PlatformVersion: "LATEST"
      TaskDefinition: !Ref ECSTaskDefinitionAPI
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: false
          Rollback: false
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - {
                "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-secgrp-api-service",
              }
          Subnets:
            - {
                "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-subnet1",
              }
      HealthCheckGracePeriodSeconds: 0
      SchedulingStrategy: "REPLICA"
      EnableExecuteCommand: true

  ECSServiceWEB:
    Type: "AWS::ECS::Service"
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub "${ProjectId}-${EnvironmentType}-web-service"
      Cluster: !GetAtt ECSCluster.Arn
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroupWEB
          ContainerName: !Sub "${ProjectId}-${EnvironmentType}-web"
          ContainerPort: 3000
      DesiredCount: 1
      LaunchType: "FARGATE"
      PlatformVersion: "LATEST"
      TaskDefinition: !Ref ECSTaskDefinitionWEB
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: false
          Rollback: false
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - {
                "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-secgrp-web-service",
              }
          Subnets:
            - {
                "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-subnet1",
              }
      HealthCheckGracePeriodSeconds: 0
      SchedulingStrategy: "REPLICA"
      EnableExecuteCommand: true

  ECSTaskDefinitionAPI:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectId}-${EnvironmentType}-api:latest"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref ECSLogGroupAPI
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Name: !Sub "${ProjectId}-${EnvironmentType}-api"
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
              Protocol: "tcp"
      Family: !Sub "${ProjectId}-${EnvironmentType}-api-task"
      ExecutionRoleArn: !ImportValue ECSTaskExecRole
      TaskRoleArn: !ImportValue ECSTaskRole
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "256"
      Memory: "512"

  ECSTaskDefinitionWEB:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectId}-${EnvironmentType}-web:latest"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref ECSLogGroupWEB
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Name: !Sub "${ProjectId}-${EnvironmentType}-web"
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: "tcp"
      Family: !Sub "${ProjectId}-${EnvironmentType}-web-task"
      ExecutionRoleArn: !ImportValue ECSTaskExecRole
      TaskRoleArn: !ImportValue ECSTaskRole
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "256"
      Memory: "512"

  # ------------------------------------------------------------#
  #  RDS
  # ------------------------------------------------------------#
  RDSDBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: !Sub "${ProjectId}-${EnvironmentType}-rds"
      AllocatedStorage: 20
      DBInstanceClass: "db.t2.micro"
      Engine: "mysql"
      MasterUsername: "admin"
      MasterUserPassword: !Ref RdsMasterUserPassword
      PreferredBackupWindow: "19:42-20:12"
      BackupRetentionPeriod: 7
      AvailabilityZone: !Sub "${AWS::Region}a"
      PreferredMaintenanceWindow: "thu:14:16-thu:14:46"
      MultiAZ: false
      EngineVersion: "5.7.34"
      AutoMinorVersionUpgrade: true
      LicenseModel: "general-public-license"
      PubliclyAccessible: true
      StorageType: "gp2"
      Port: 3306
      StorageEncrypted: false
      CopyTagsToSnapshot: true
      MonitoringInterval: 0
      EnableIAMDatabaseAuthentication: false
      EnablePerformanceInsights: false
      DeletionProtection: false
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      VPCSecurityGroups:
        - {
            "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-secgrp-rds",
          }
      MaxAllocatedStorage: 1000
      DBParameterGroupName: !Ref RDSDBParameterGroup
      OptionGroupName: "default:mysql-5-7"
      CACertificateIdentifier: "rds-ca-2019"

  RDSDBParameterGroup:
    Type: "AWS::RDS::DBParameterGroup"
    Properties:
      Family: mysql5.7
      Description: !Sub "${ProjectId} ${EnvironmentType} DB Parameter Group"
      Parameters:
        character_set_client: utf8
        character_set_connection: utf8
        character_set_database: utf8
        character_set_filesystem: utf8
        character_set_results: utf8
        character_set_server: utf8
        time_zone: Asia/Tokyo

  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Sub "db subnet group for ${ProjectId} ${EnvironmentType}"
      DBSubnetGroupName: !Sub "${ProjectId}-${EnvironmentType}-dbsubnetgrp"
      SubnetIds:
        - { "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-subnet1" }
        - { "Fn::ImportValue": !Sub "${ProjectId}-${EnvironmentType}-subnet2" }

  # ------------------------------------------------------------#
  #  S3
  # ------------------------------------------------------------#

  S3BucketImage:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${ProjectId}-${EnvironmentType}-image-bucket"
      VersioningConfiguration:
        Status: "Enabled"

  S3BucketPDF:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${ProjectId}-${EnvironmentType}-wedding-pdf-bucket"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "GET"
            AllowedOrigins:
              - "http://localhost:3000"
              - !Sub
                - "http://${Domain}"
                - { Domain: !GetAtt ApplicationLoadBalancer.DNSName }
              - !Sub
                - "https://${Domain}"
                - { Domain: !GetAtt ApplicationLoadBalancer.DNSName }
      VersioningConfiguration:
        Status: "Enabled"

  S3BucketStatic:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${ProjectId}-${EnvironmentType}-static-bucket"
      VersioningConfiguration:
        Status: "Enabled"

  S3BucketPolicyStatic:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3BucketStatic
      PolicyDocument:
        Version: "2008-10-17"
        Id: "PolicyForCloudFrontPrivateContent"
        Statement:
          - Sid: "1"
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentityS3BucketStatic}"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3BucketStatic}/*"

  # ------------------------------------------------------------#
  #  CloudFront
  # ------------------------------------------------------------#
  CloudFrontDistributionS3BucketStatic:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !Sub "${S3BucketStatic}.s3.${AWS::Region}.amazonaws.com"
            Id: !Sub "${S3BucketStatic}.s3.${AWS::Region}.amazonaws.com"
            OriginPath: ""
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentityS3BucketStatic}"
        OriginGroups:
          Quantity: 0
        DefaultCacheBehavior:
          AllowedMethods:
            - "HEAD"
            - "GET"
          CachedMethods:
            - "HEAD"
            - "GET"
          Compress: true
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          SmoothStreaming: false
          TargetOriginId: !Sub "${S3BucketStatic}.s3.${AWS::Region}.amazonaws.com"
          ViewerProtocolPolicy: "allow-all"
        Comment: ""
        PriceClass: "PriceClass_All"
        Enabled: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: "TLSv1"
        Restrictions:
          GeoRestriction:
            RestrictionType: "none"
        HttpVersion: "http2"
        DefaultRootObject: ""
        IPV6Enabled: true

  CloudFrontOriginAccessIdentityS3BucketStatic:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${ProjectId}-${EnvironmentType}-access-identity-s3-static-backet"

  # ------------------------------------------------------------#
  #  Cognito
  # ------------------------------------------------------------#
  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub "${ProjectId}-${EnvironmentType}-user-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          TemporaryPasswordValidityDays: 7
      LambdaConfig: {}
      Schema:
        - Name: "sub"
          AttributeDataType: "String"
          DeveloperOnlyAttribute: false
          Mutable: false
          Required: true
          StringAttributeConstraints:
            MinLength: "1"
            MaxLength: "2048"
        - Name: "email"
          AttributeDataType: "String"
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
        - Name: "email_verified"
          AttributeDataType: "Boolean"
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
        - Name: "custom:wedding_id"
          AttributeDataType: "Number"
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
          NumberAttributeConstraints:
            MinValue: "0"
            MaxValue: "1000"
        - Name: "custom:gender"
          AttributeDataType: "String"
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "10"
        - Name: "custom:wedding_title"
          AttributeDataType: "String"
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MaxLength: "30"
        - Name: "custom:name"
          AttributeDataType: "String"
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MaxLength: "20"
      AutoVerifiedAttributes:
        - "email"
      UsernameAttributes:
        - "email"
      MfaConfiguration: "OFF"
      EmailConfiguration:
        EmailSendingAccount: "COGNITO_DEFAULT"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameConfiguration:
        CaseSensitive: false
      VerificationMessageTemplate:
        DefaultEmailOption: "CONFIRM_WITH_CODE"

  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub "${ProjectId}-${EnvironmentType}-api-server"
      RefreshTokenValidity: 30
      ExplicitAuthFlows:
        - "ALLOW_CUSTOM_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"
        - "ALLOW_USER_SRP_AUTH"
      PreventUserExistenceErrors: "ENABLED"
      AllowedOAuthFlowsUserPoolClient: false
      IdTokenValidity: 1
      AccessTokenValidity: 1
      TokenValidityUnits:
        AccessToken: "days"
        IdToken: "days"
        RefreshToken: "days"
